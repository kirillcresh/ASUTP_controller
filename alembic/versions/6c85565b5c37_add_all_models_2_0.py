"""add all models 2.0

Revision ID: 6c85565b5c37
Revises: c32634aafc11
Create Date: 2024-06-16 11:29:57.957924

"""
from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "6c85565b5c37"
down_revision: Union[str, None] = "c32634aafc11"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "action",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False, comment="Название действия"),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores action names",
    )
    op.create_table(
        "element",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False, comment="Название показателя"),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores elements data",
    )
    op.create_table(
        "current_state",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("param_id", sa.Integer(), nullable=False),
        sa.Column("element_id", sa.Integer(), nullable=False),
        sa.Column(
            "value",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Значение показателя",
        ),
        sa.Column(
            "update_time",
            sa.DateTime(),
            nullable=False,
            comment="Дата обновления записи",
        ),
        sa.ForeignKeyConstraint(
            ["element_id"],
            ["element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["param_id"],
            ["param.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores current state data",
    )
    op.create_table(
        "error",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("error_text", sa.Text(), nullable=False, comment="Текст ошибки"),
        sa.Column("closed_by", sa.Integer(), nullable=True),
        sa.Column(
            "date_created",
            sa.DateTime(),
            nullable=False,
            comment="Дата получения сообщения об ошибке",
        ),
        sa.ForeignKeyConstraint(["closed_by"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores errors data",
    )
    op.create_table(
        "history_register",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("param_id", sa.Integer(), nullable=False),
        sa.Column("element_id", sa.Integer(), nullable=False),
        sa.Column(
            "value",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Значение показателя",
        ),
        sa.Column(
            "date_created",
            sa.DateTime(),
            nullable=False,
            comment="Дата создания записи",
        ),
        sa.ForeignKeyConstraint(
            ["element_id"],
            ["element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["param_id"],
            ["param.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores history register data",
    )
    op.create_table(
        "maintenance_journal",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("action_id", sa.Integer(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column(
            "description", sa.Text(), nullable=False, comment="Описание действия"
        ),
        sa.Column(
            "value",
            sa.Numeric(precision=10, scale=2),
            nullable=True,
            comment="Значение показателя, если валидно",
        ),
        sa.Column(
            "date_created",
            sa.DateTime(),
            nullable=False,
            comment="Дата создания записи",
        ),
        sa.ForeignKeyConstraint(["action_id"], ["action.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["created_by"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores maintenance journal data",
    )
    op.create_table(
        "report",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("filename", sa.Text(), nullable=False, comment="Имя отчета"),
        sa.Column(
            "date_created",
            sa.DateTime(),
            nullable=False,
            comment="Дата создания отчета",
        ),
        sa.ForeignKeyConstraint(["created_by"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores reports data",
    )
    op.create_table(
        "state_register",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("param_id", sa.Integer(), nullable=False),
        sa.Column("element_id", sa.Integer(), nullable=False),
        sa.Column(
            "value",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Значение показателя",
        ),
        sa.Column(
            "date_created",
            sa.DateTime(),
            nullable=False,
            comment="Дата создания записи",
        ),
        sa.ForeignKeyConstraint(
            ["element_id"],
            ["element.id"],
        ),
        sa.ForeignKeyConstraint(
            ["param_id"],
            ["param.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="This table stores state register data",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("state_register")
    op.drop_table("report")
    op.drop_table("maintenance_journal")
    op.drop_table("history_register")
    op.drop_table("error")
    op.drop_table("current_state")
    op.drop_table("element")
    op.drop_table("action")
    # ### end Alembic commands ###
